name: 'Load Container Action'

description: 'Imports the image build caches and loads them for Docker CLI'

inputs:
  osg_series:
    description: 'OSG release series used to install packages'
    required: true
  osg_repo:
    description: 'Input string that gets passed along to the docker build args'
    required: true
  context:
    description: 'Path to container files, including Dockerfile'
    required: false
    default: '.'
  timestamp_tag:
    description: >-
      Timestamped tag name (e.g.,
      "opensciencegrid/osgvo-docker-pilot3.6-release-YYYYMMDD-hhmm")
      used to pass the Dockerfile as $TIMESTAMP_TAG
    required: false
    default: ''

outputs:
  image_tag:
    description: 'The image tag available through Docker CLI tools'
    value: ${{ steps.generate-image-name.outputs.image }}:latest

runs:
  using: "composite"
  steps:
  - uses: actions/checkout@v3

  - id: generate-image-name
    shell: bash
    run: |
      if [[ ${{ inputs.context }} == "." ]] || \
         [[ ${{ inputs.context }} == "./" ]]; then
         # Try to guess the image name from our docker repo naming conventions
         # E.g., opensciencegrid/docker-frontier-squid
         IMAGE_NAME=${GITHUB_REPOSITORY/opensciencegrid\/docker-//}
      elif [[ -d ${{ inputs.context }} ]]; then
         # Assume that the containing dir is the image name
         IMAGE_NAME=$(basename ${{ inputs.context }})
      else
        echo "${{ inputs.context }} is not a directory"
        exit 1
      fi
      echo "image=$IMAGE_NAME" >> ${GITHUB_OUTPUT}

  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v3

  - name: Load Docker images for use in Docker CLI
    uses: docker/build-push-action@v5
    with:
      push: False
      context: ${{ inputs.context }}
      build-args: |
        BASE_YUM_REPO=${{ inputs.osg_repo }}
        BASE_OSG_SERIES=${{ inputs.osg_series }}
        TIMESTAMP_TAG=${{ inputs.timestamp_tag }}
      load: True # allow acces to built images through the Docker CLI
      tags: ${{ steps.generate-image-name.outputs.image }}:latest
      cache-from: >-
        type=gha,
        scope=${{ steps.generate-image-name.outputs.image }}
              -${{ inputs.osg_series}}
              -${{ inputs.osg_repo }}
              -buildx
